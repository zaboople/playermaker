- Player channel should only be set once
- MyMidi3.ReserveChannels appears to have state problems and is global
- Divisions.* can be hidden since we can share packages with test

- Big problem
    - Player.c().r().c() does not return a _new_ chord; it adds delayed notes to the existing chord.
    That's kind of confusing, for one thing... but also, suppose I want to do
        Player.c().r().c().t(16)
    So I'm trying to extend the second "chord" by a sixteenth, but _not_ the original chord. Just the second.
    Well, that's not gonna work, because it's all one chord. Ouch!
    - Solution:
        Player
            .c()
                .r(8).c()
                    .r(8).c()
                    .up()
                .up()
            .up()
        - This is actually kind of nice, because I can time notes in terms of their relationship to the
        previous chord, not the original chord. Less mathy.
        - It's also kind of hairy with the nesting, so I have to carefully time my up()'s, although I
        can always do a .p() which should automatically leap to the top. Cool.
        - n() is my workaround, but n() is dumb. It's a c() that can only have one note. Yes we need
        Note objects, but we don't need to expose them.
        - If n() goes, then really all attributes of Note except pitch move up to Chord. So the
        List<Note> in Chord is really List<Integer>. Wow.
        - Actually, I'd rather that n() is an alias to c() or vice versa, because tests currently use n().
          But even then, tests use c().r().c(), which will no longer compile because you need more than one
          up()
        - Maybe n() should make a new Chord, and c() should append to the chord. Kind of confusing though.
          Maybe on a temporary basis.
        - Actually no, c() can set its own duration, so it should be a new Chord.
            Maybe n() could just be adding notes but why would you do that.
        Not a note, no, just make a new chord, that way you have both options.


- Player
    Label keys C1 - G8 or whatever

- High playermaker
    - Add C1, C2, C3, D1, D2, D3 to constants; easier than -12 +12 I think.
    - ARGH midi channel 10 is drums!!!!
        This article contains infor about what notes are what - map to constants:
        https://en.wikipedia.org/wiki/General_MIDI#Percussive
        hey there's stuff in here about reverb and so forth so maybe...
        https://en.wikipedia.org/wiki/General_MIDI_Level_2
    - Tests
        - Do a test where you tail off - a 1, 2., 2, 4, 8, 16
        - Test Chord.bpm()
            - Change speed - and put speed in player. My idea is that speed is typically 0, but
                you can enhance it by speed(+/-X). This means anytime a Sound is added, the
                speed needs to be added to it.
    - Hammer-ons/pull-offs
        - This makes no sense at all.
        - And a 16th that appears at the end of a half (right before another note)
        - Or a 16th that starts a half
    - Slurs/Slides or do we even - just do 128ths... but we could do them different
        - How about series of 128ths or whatever, and then a sort of finish...didn't i already make a finish?
    - Can't help but think you should just allow player to do bends/vibratos etc. on the last note played, and just
        have c() return player itself. But consider p(8,C).rest(16).n(16, D)

- Medium
    -Portamento, Legato, Reverb?
        http://audioundone.com/tip-knowing-the-midi-messages-part-2
    - off-tune mode
        - create a map of notes to pitch bends, so that we can retrieve at runtime; this would go in the player itself.

- Low
    - For testing it would be nice to add multi-sequence play, i.e. play multiple MyMidi's in a row
    Speed should be modulated as well - don't apply it directly to the note speed, but after the note is transposed.

    -Bends need to throw exceptions when out of range




